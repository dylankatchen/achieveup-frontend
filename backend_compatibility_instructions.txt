ACHIEVEUP FRONTEND - BACKEND COMPATIBILITY INSTRUCTIONS
========================================================

This document provides detailed instructions for the backend AI to ensure full compatibility with the AchieveUp frontend.

CURRENT FRONTEND STATUS:
- ✅ TypeScript implementation complete
- ✅ UCF branding and color scheme implemented
- ✅ Email/password authentication system with Canvas API token integration
- ✅ All components converted to use real API calls (no mock data)
- ✅ Production-ready build configuration
- ✅ Responsive design and accessibility features

BACKEND URL: https://gen-ai-prime-3ddeabb35bd7.herokuapp.com

REQUIRED BACKEND ENDPOINTS & IMPLEMENTATION:

1. AUTHENTICATION ENDPOINTS
---------------------------
POST /auth/signup
- Purpose: User registration with email/password and optional Canvas API token
- Request: { name: string, email: string, password: string, canvasApiToken?: string }
- Response: { token: string, user: User }
- Status: NEEDS IMPLEMENTATION

POST /auth/login
- Purpose: User login with email/password
- Request: { email: string, password: string }
- Response: { token: string, user: User }
- Status: NEEDS IMPLEMENTATION

GET /auth/verify
- Purpose: Verify authentication token
- Headers: Authorization: Bearer <token>
- Response: { user: User }
- Status: NEEDS IMPLEMENTATION

GET /auth/me
- Purpose: Get current user information
- Headers: Authorization: Bearer <token>
- Response: { user: User }
- Status: NEEDS IMPLEMENTATION

PUT /auth/profile
- Purpose: Update user profile information including Canvas API token
- Headers: Authorization: Bearer <token>
- Request: { name: string, email: string, canvasApiToken?: string }
- Response: { user: User }
- Status: NEEDS IMPLEMENTATION

PUT /auth/password
- Purpose: Change user password
- Headers: Authorization: Bearer <token>
- Request: { currentPassword: string, newPassword: string }
- Response: void
- Status: NEEDS IMPLEMENTATION

2. CANVAS INTEGRATION ENDPOINTS
-------------------------------
Note: These endpoints must use the user's stored Canvas API token from their profile to make authenticated requests to the Canvas API. The token is never sent to the frontend after initial entry.

GET /canvas/courses
- Purpose: Get user's Canvas courses using their stored API token
- Headers: Authorization: Bearer <token>
- Response: CanvasCourse[]
- Status: NEEDS IMPLEMENTATION

GET /canvas/courses/{courseId}/quizzes
- Purpose: Get quizzes for a specific course using user's Canvas API token
- Headers: Authorization: Bearer <token>
- Response: CanvasQuiz[]
- Status: NEEDS IMPLEMENTATION

GET /canvas/quizzes/{quizId}/questions
- Purpose: Get questions for a specific quiz using user's Canvas API token
- Headers: Authorization: Bearer <token>
- Response: CanvasQuestion[]
- Status: NEEDS IMPLEMENTATION

3. ACHIEVEUP CORE ENDPOINTS
---------------------------
POST /achieveup/matrix/create
- Purpose: Create skill matrix for a course
- Request: { course_id: string, matrix_name: string, skills: string[] }
- Response: SkillMatrix
- Status: NEEDS IMPLEMENTATION

PUT /achieveup/matrix/{matrixId}
- Purpose: Update skill matrix
- Request: { skills: string[] }
- Response: SkillMatrix
- Status: NEEDS IMPLEMENTATION

GET /achieveup/matrix/{courseId}
- Purpose: Get skill matrix for a course
- Response: SkillMatrix
- Status: NEEDS IMPLEMENTATION

POST /achieveup/assign-skills
- Purpose: Assign skills to quiz questions
- Request: { course_id: string, question_skills: { [questionId: string]: string[] } }
- Response: void
- Status: NEEDS IMPLEMENTATION

POST /achieveup/suggest-skills
- Purpose: Suggest skills for a quiz question
- Request: { question_text: string, course_context?: string }
- Response: string[]
- Status: NEEDS IMPLEMENTATION

4. BADGE MANAGEMENT ENDPOINTS
-----------------------------
POST /achieveup/badges/generate
- Purpose: Generate badges for a student
- Request: { student_id: string, course_id: string, skill_levels: { [skillName: string]: 'beginner' | 'intermediate' | 'advanced' } }
- Response: Badge[]
- Status: NEEDS IMPLEMENTATION

GET /achieveup/badges/{studentId}
- Purpose: Get badges for a student
- Response: Badge[]
- Status: NEEDS IMPLEMENTATION

5. PROGRESS TRACKING ENDPOINTS
------------------------------
GET /achieveup/progress/{studentId}/{courseId}
- Purpose: Get skill progress for a student in a course
- Response: StudentProgress
- Status: NEEDS IMPLEMENTATION

PUT /achieveup/progress/{studentId}/{courseId}
- Purpose: Update skill progress for a student in a course
- Request: { skill_updates: { [skillName: string]: { score: number, notes?: string } } }
- Response: StudentProgress
- Status: NEEDS IMPLEMENTATION

6. ANALYTICS & EXPORT ENDPOINTS
-------------------------------
GET /achieveup/graphs/individual/{studentId}
- Purpose: Get analytics data for a student
- Response: GraphData
- Status: NEEDS IMPLEMENTATION

GET /achieveup/export/{courseId}
- Purpose: Export course data (CSV)
- Response: CourseData
- Status: NEEDS IMPLEMENTATION

POST /achieveup/import
- Purpose: Import course data
- Request: { course_id: string, data: CourseData }
- Response: void
- Status: NEEDS IMPLEMENTATION

DATA MODELS REQUIRED:
====================

User:
{
  id: string,
  name: string,
  email: string,
  role: 'student' | 'instructor' | 'admin',
  canvasApiToken?: string // Store securely, never send to frontend after entry
}

SkillMatrix:
{
  _id: string,
  course_id: string,
  matrix_name: string,
  skills: string[],
  created_at: string,
  updated_at: string
}

Badge:
{
  _id: string,
  student_id: string,
  course_id: string,
  skill: string,
  badge_type: 'skill_master' | 'consistent_learner' | 'quick_learner' | 'persistent',
  description: string,
  earned_at: string,
  level: 'beginner' | 'intermediate' | 'advanced'
}

StudentProgress:
{
  student_id: string,
  course_id: string,
  skill_progress: {
    [skillName: string]: {
      score: number,
      level: 'beginner' | 'intermediate' | 'advanced',
      total_questions: number,
      correct_answers: number
    }
  },
  last_updated: string
}

CanvasCourse:
{
  id: string,
  name: string,
  code: string
}

CanvasQuiz:
{
  id: string,
  title: string,
  course_id: string
}

CanvasQuestion:
{
  id: string,
  question_text: string,
  quiz_id: string
}

GraphData:
{
  timeSeriesData?: Array<{
    date: string,
    [skillName: string]: number | string
  }>,
  performance?: PerformanceData[],
  distribution?: SkillDistributionData[],
  trends?: TrendData[],
  radar?: RadarData[]
}

CourseData:
{
  skill_matrices: SkillMatrix[],
  badges: Badge[],
  skill_progress: StudentProgress[]
}

AUTHENTICATION REQUIREMENTS:
===========================
1. JWT token-based authentication for all protected endpoints
2. Token refresh mechanism (optional, but recommended)
3. Role-based access control (student/instructor/admin)
4. Secure password hashing (bcrypt or Argon2 recommended)
5. Session management (stateless JWT preferred)
6. Canvas API token must be stored securely and never sent to frontend after initial entry

SECURITY REQUIREMENTS:
======================
1. Input validation and sanitization for all endpoints
2. CORS configuration for frontend domain
3. Rate limiting on API endpoints
4. HTTPS enforcement
5. Secure headers (HSTS, CSP, etc.)
6. SQL injection prevention (if using SQL DB)
7. XSS protection
8. Never log or expose Canvas API tokens in logs or error messages

ERROR HANDLING:
===============
1. Consistent error response format:
   {
     error: string,
     message: string,
     statusCode: number
   }
2. Proper HTTP status codes
3. Detailed error logging (never log Canvas API tokens)
4. User-friendly error messages
5. If Canvas API token is missing or invalid, return a clear error so the frontend can prompt the user to update their token

PERFORMANCE REQUIREMENTS:
=========================
1. Database indexing for frequent queries
2. API response caching where appropriate
3. Pagination for large datasets
4. Efficient database queries
5. Connection pooling

TESTING REQUIREMENTS:
=====================
1. Unit tests for all endpoints
2. Integration tests for API flows
3. Authentication tests
4. Error handling tests
5. Performance tests

DEPLOYMENT CONSIDERATIONS:
==========================
1. Environment variable configuration
2. Database migration scripts
3. Health check endpoints
4. Monitoring and logging setup
5. Backup strategies

INTEGRATION WITH EXISTING KNOWGAP FEATURES:
===========================================
1. Ensure AchieveUp endpoints don't conflict with existing KnowGap endpoints
2. Share authentication system with KnowGap
3. Integrate with existing Canvas data using stored Canvas API tokens
4. Maintain consistent API response formats
5. Share database connections where appropriate

PRIORITY IMPLEMENTATION ORDER:
==============================
1. Authentication endpoints (critical for frontend functionality)
2. Canvas integration endpoints (needed for course data)
3. Basic AchieveUp CRUD operations (matrix, badges, progress)
4. Analytics and reporting endpoints
5. Advanced features (AI suggestions, data export/import)

FRONTEND EXPECTATIONS:
======================
1. All API calls expect JSON responses
2. Authentication tokens in Authorization header
3. Error responses follow consistent format
4. CORS enabled for frontend domain
5. Rate limiting with proper error responses
6. Real-time data updates (consider WebSocket implementation)

ENVIRONMENT VARIABLES NEEDED:
=============================
- DATABASE_URL: MongoDB connection string
- JWT_SECRET: Secret for JWT token signing
- CORS_ORIGIN: Frontend domain for CORS
- CANVAS_API_URL: Canvas API base URL

NOTES:
======
- Canvas API token is the only method for Canvas integration. OAuth/SSO is not required or supported in this version.
- All Canvas API requests must be made server-side using the stored token.
- Users can update their Canvas API token at any time via the /auth/profile endpoint.
- If the Canvas API token is missing or invalid, endpoints must return a clear error so the frontend can prompt the user to update their token.

MONITORING & LOGGING:
=====================
1. Request/response logging
2. Error tracking and alerting
3. Performance metrics
4. User activity tracking
5. API usage analytics

This frontend is production-ready and will work immediately once these backend endpoints are implemented. The authentication system is critical and should be implemented first to enable user access to the application. 