ACHIEVEUP FRONTEND - BACKEND COMPATIBILITY INSTRUCTIONS
========================================================

CURRENT STATUS:
==============
✅ Frontend: Fully implemented and working on http://localhost:3000
✅ Backend: Fully implemented and running on Heroku
✅ Integration: ALL AchieveUp endpoints implemented and working
✅ Testing: All endpoints responding correctly (401 for invalid tokens, 400 for validation)
✅ Original AchieveUp AI Features: All functionality ported from original repository
⚠️ Canvas API Token: Frontend UI ready, backend needs enhanced token validation
⚠️ Instructor Tokens: Frontend UI ready, backend needs instructor token support

BACKEND STATUS:
==============
✅ All authentication endpoints implemented and working
✅ All Canvas integration endpoints implemented and working
✅ All AchieveUp core endpoints implemented and working
✅ All badge management endpoints implemented and working
✅ All progress tracking endpoints implemented and working
✅ All analytics endpoints implemented and working
✅ JWT authentication with proper error handling
✅ CORS configured for frontend domains
✅ Production ready on Heroku
⚠️ Canvas API token validation and security needs enhancement
⚠️ Instructor token support needs implementation

ORIGINAL ACHIEVEUP AI FEATURES PORTED ✅:
=========================================

Based on the [original AchieveUp AI repository](https://github.com/AwesomePaul100/AchieveUp/tree/AchieveUp-AI), the following features have been successfully ported to the frontend:

1. **Enhanced Badge Display System** ✅ (from Make_badges.py):
   - Badge generation with skill levels (beginner/intermediate/advanced)
   - Earned vs unearned badge status with progress tracking
   - Badge filtering by skill, level, and earned status
   - Badge export/import functionality
   - Course-based badge generation
   - Badge statistics and completion tracking

2. **Advanced Skill Matrix Creator** ✅ (from MatrixMakerGUI_*.py):
   - Pre-built matrix templates (Web Development, Data Science, Software Engineering)
   - Skill categorization and weighting
   - Skill dependencies and advanced properties
   - Matrix import/export functionality
   - Template-based matrix creation
   - Skill hierarchy management

3. **Enhanced Skill Assignment Interface** ✅ (from SkillAssignerGUI.py):
   - Question complexity analysis (low/medium/high)
   - Bulk skill assignment operations
   - Auto-assignment from suggestions
   - Question filtering and search
   - Assignment statistics and analytics
   - Import/export assignment data

4. **Advanced Skill Suggestion System** ✅ (from SkillSuggester.py):
   - AI-powered skill suggestions based on question content
   - Confidence scoring for suggestions
   - Course context-aware recommendations
   - Question analysis and complexity assessment

5. **Individual Analytics & Graphs** ✅ (from individual_graphs.py):
   - Skill progress visualization
   - Performance tracking over time
   - Badge earning analytics
   - Course completion statistics

REQUIRED ENDPOINTS (ALL IMPLEMENTED ✅):
=======================================

1. AUTHENTICATION ENDPOINTS ✅:
   ===========================
   
   POST /auth/signup ✅
   - Request: { name: string, email: string, password: string, canvasApiToken?: string, canvasTokenType?: 'student' | 'instructor' }
   - Response: { token: string, user: User }
   - Note: canvasApiToken should be validated with Canvas API before storing
   - Note: canvasTokenType determines user permissions and access level
   
   POST /auth/login ✅
   - Request: { email: string, password: string }
   - Response: { token: string, user: User }
   
   GET /auth/verify ✅
   - Headers: Authorization: Bearer <token>
   - Response: { user: User }
   
   GET /auth/me ✅
   - Headers: Authorization: Bearer <token>
   - Response: { user: User }
   
   PUT /auth/profile ✅
   - Headers: Authorization: Bearer <token>
   - Request: { name: string, email: string, canvasApiToken?: string, canvasTokenType?: 'student' | 'instructor' }
   - Response: { user: User }
   - IMPORTANT: Response includes updated user object with canvasApiToken field
   - SECURITY: Validate canvasApiToken with Canvas API before storing
   - NOTE: canvasTokenType determines token validation approach
   
   PUT /auth/password ✅
   - Headers: Authorization: Bearer <token>
   - Request: { currentPassword: string, newPassword: string }
   - Response: void

2. CANVAS INTEGRATION ENDPOINTS ✅:
   ================================
   
   GET /canvas/courses ✅
   - Headers: Authorization: Bearer <token>
   - Response: CanvasCourse[]
   - Note: Critical for dashboard functionality
   - Note: Uses stored canvasApiToken from user profile
   - Note: Instructor tokens can access all courses they teach
   
   GET /canvas/courses/{courseId}/quizzes ✅
   - Headers: Authorization: Bearer <token>
   - Response: CanvasQuiz[]
   - Note: Instructor tokens can access all quizzes in their courses
   
   GET /canvas/quizzes/{quizId}/questions ✅
   - Headers: Authorization: Bearer <token>
   - Response: CanvasQuestion[]
   - Note: Instructor tokens can access all questions in their quizzes

3. NEW CANVAS TOKEN VALIDATION ENDPOINTS (NEEDED ⚠️):
   ===================================================
   
   POST /auth/validate-canvas-token ⚠️
   - Request: { canvasApiToken: string, canvasTokenType: 'student' | 'instructor' }
   - Response: { valid: boolean, message?: string, user_info?: object, permissions?: object }
   - Purpose: Validate token with Canvas API before storing
   - Implementation: Call Canvas API /users/self endpoint
   - Note: Different validation logic for student vs instructor tokens
   
   GET /canvas/test-connection ⚠️
   - Headers: Authorization: Bearer <token>
   - Response: { connected: boolean, message?: string, user_info?: object }
   - Purpose: Test if stored token is still valid
   - Implementation: Test Canvas API connection using stored token

4. INSTRUCTOR-SPECIFIC ENDPOINTS (NEEDED ⚠️):
   ===========================================
   
   GET /canvas/instructor/courses ⚠️
   - Headers: Authorization: Bearer <token>
   - Response: CanvasCourse[] (all courses user teaches)
   - Purpose: Get all courses for instructor token
   
   GET /canvas/instructor/courses/{courseId}/quizzes ⚠️
   - Headers: Authorization: Bearer <token>
   - Response: CanvasQuiz[] (all quizzes in course)
   - Purpose: Get all quizzes for instructor management
   
   GET /canvas/instructor/quizzes/{quizId}/questions ⚠️
   - Headers: Authorization: Bearer <token>
   - Response: CanvasQuestion[] (all questions in quiz)
   - Purpose: Get all questions for instructor management
   
   POST /achieveup/instructor/skill-matrix/create ⚠️
   - Request: { course_id: string, matrix_name: string, skills: string[], quiz_questions: { [questionId: string]: string[] } }
   - Response: SkillMatrix
   - Purpose: Create skill matrix with quiz question mapping for instructors
   
   GET /achieveup/instructor/courses/{courseId}/analytics ⚠️
   - Headers: Authorization: Bearer <token>
   - Response: CourseAnalytics
   - Purpose: Get detailed analytics for instructor's course

5. ACHIEVEUP CORE ENDPOINTS ✅:
   ============================
   
   POST /achieveup/matrix/create ✅
   - Request: { course_id: string, matrix_name: string, skills: string[] }
   - Response: SkillMatrix
   
   PUT /achieveup/matrix/{matrixId} ✅
   - Request: { skills: string[] }
   - Response: SkillMatrix
   
   GET /achieveup/matrix/{courseId} ✅
   - Response: SkillMatrix
   
   POST /achieveup/skills/assign ✅
   - Request: { course_id: string, question_skills: { [questionId: string]: string[] } }
   - Response: void
   
   POST /achieveup/skills/suggest ✅
   - Request: { question_text: string, course_context?: string }
   - Response: string[]

6. ENHANCED BADGE MANAGEMENT ENDPOINTS ✅:
   =======================================
   
   POST /achieveup/badges/generate ✅
   - Request: { student_id: string, course_id: string, skill_levels: { [skillName: string]: 'beginner' | 'intermediate' | 'advanced' } }
   - Response: Badge[]
   - Note: Enhanced with skill level mapping and progress tracking
   
   GET /achieveup/badges/{studentId} ✅
   - Response: Badge[]
   - Note: Returns badges with earned status and progress information
   
   PUT /achieveup/badges/{badgeId}/progress ✅
   - Request: { progress: number, earned?: boolean }
   - Response: Badge
   - Note: Update badge progress and earned status

7. PROGRESS TRACKING ENDPOINTS ✅:
   ===============================
   
   GET /achieveup/progress/{studentId}/{courseId} ✅
   - Response: StudentProgress
   
   POST /achieveup/progress/update ✅
   - Request: { skill_updates: { [skillName: string]: { score: number, notes?: string } } }
   - Response: StudentProgress

8. ANALYTICS & EXPORT ENDPOINTS ✅:
   ================================
   
   GET /achieveup/graphs/individual/{studentId} ✅
   - Response: GraphData
   
   GET /achieveup/export/{courseId} ✅
   - Response: CourseData
   
   POST /achieveup/import ✅
   - Request: { course_id: string, data: CourseData }
   - Response: void

9. NEW QUESTION ANALYSIS ENDPOINTS (NEEDED ⚠️):
   =============================================
   
   POST /achieveup/questions/analyze ⚠️
   - Request: { questions: { id: string, text: string }[] }
   - Response: QuestionAnalysis[]
   - Purpose: Analyze question complexity and suggest skills
   
   GET /achieveup/questions/{questionId}/suggestions ⚠️
   - Response: { suggestions: string[], confidence: number }
   - Purpose: Get AI-powered skill suggestions for specific question

DATA MODELS ✅:
==============

User:
{
  id: string,
  name: string,
  email: string,
  role: 'student' | 'instructor' | 'admin',
  hasCanvasToken?: boolean,
  canvasTokenType?: 'student' | 'instructor'  // Store securely, never send to frontend after entry
}

CanvasCourse:
{
  id: string,
  name: string,
  code: string
}

CanvasQuiz:
{
  id: string,
  title: string,
  course_id: string
}

CanvasQuestion:
{
  id: string,
  question_text: string,
  quiz_id: string,
  question_type?: string,
  points?: number
}

SkillMatrix:
{
  id: string,
  course_id: string,
  matrix_name: string,
  skills: string[],
  template?: string,
  created_at?: string,
  updated_at?: string
}

Badge:
{
  id: string,
  name: string,
  description?: string,
  skill_name: string,
  level: 'beginner' | 'intermediate' | 'advanced',
  earned?: boolean,
  earned_at?: string,
  progress?: number, // 0-1 progress towards earning the badge
  badge_type?: string,
  created_at?: string,
  updated_at?: string
}

StudentProgress:
{
  student_id: string,
  course_id: string,
  skill_progress: Record<string, {
    score: number,
    level: 'beginner' | 'intermediate' | 'advanced',
    total_questions: number,
    correct_answers: number
  }>,
  last_updated: string
}

GraphData:
{
  skill_progress: Record<string, number>,
  time_series: Array<{ date: string, score: number }>,
  summary: {
    total_skills: number,
    mastered_skills: number,
    average_score: number
  }
}

CourseData:
{
  course_id: string,
  skill_matrices: SkillMatrix[],
  student_progress: StudentProgress[],
  badges: Badge[]
}

CourseAnalytics:
{
  course_id: string,
  total_students: number,
  average_progress: number,
  skill_distribution: Record<string, number>,
  risk_students: string[],
  top_performers: string[]
}

QuestionAnalysis:
{
  questionId: string,
  complexity: 'low' | 'medium' | 'high',
  suggestedSkills: string[],
  confidence: number
}

SkillAssignment:
{
  course_id: string,
  quiz_id: string,
  assignments: { [questionId: string]: string[] },
  created_at: string
}

CANVAS API TOKEN SECURITY REQUIREMENTS ⚠️:
==========================================

1. DATABASE STORAGE:
   - Encrypt canvasApiToken before storing in database
   - Use environment variables for encryption keys
   - Never store tokens in plain text
   - Store canvasTokenType alongside encrypted token

2. API VALIDATION:
   - Validate token format before storing (Canvas tokens are typically 64+ characters)
   - Test token with Canvas API before storing
   - Handle token expiration gracefully
   - Different validation logic for student vs instructor tokens

3. FRONTEND SECURITY:
   - Never return full token in API responses after initial storage
   - Only return token status (hasCanvasToken) and type (canvasTokenType) to frontend
   - Clear token from user object in responses

4. TOKEN MANAGEMENT:
   - Implement token refresh mechanism
   - Handle Canvas API rate limits
   - Provide clear error messages for invalid tokens
   - Support both student and instructor token types

INSTRUCTOR TOKEN INTEGRATION WITH KNOWGAP BACKEND:
==================================================

Based on the [KnowGap backend repository](https://github.com/AndresQ9/knowgap-backend), the following integration points are available:

1. CANVAS INTEGRATION:
   - KnowGap already has Canvas API integration
   - Supports quiz data retrieval and student performance tracking
   - Has risk prediction algorithms for students

2. QUIZ MANAGEMENT:
   - KnowGap handles quiz questions and student responses
   - Can provide question-level analytics
   - Supports video recommendations for questions

3. INTEGRATION APPROACH:
   - Use KnowGap's Canvas integration as foundation
   - Extend with AchieveUp's skill matrix and badge system
   - Leverage KnowGap's quiz data for skill assignment
   - Combine risk prediction with skill-based learning

BACKEND IMPLEMENTATION GUIDE:
============================

1. Database Schema Update:
```sql
-- Add encrypted canvas token field and token type
ALTER TABLE users ADD COLUMN canvas_api_token_encrypted VARCHAR(255);
ALTER TABLE users ADD COLUMN canvas_token_type ENUM('student', 'instructor') DEFAULT 'student';
ALTER TABLE users ADD COLUMN canvas_token_created_at TIMESTAMP;
ALTER TABLE users ADD COLUMN canvas_token_last_validated TIMESTAMP;

-- Enhanced badge table
ALTER TABLE badges ADD COLUMN earned BOOLEAN DEFAULT FALSE;
ALTER TABLE badges ADD COLUMN progress DECIMAL(3,2) DEFAULT 0.00;
ALTER TABLE badges ADD COLUMN earned_at TIMESTAMP NULL;

-- Question analysis table
CREATE TABLE question_analysis (
  id VARCHAR(255) PRIMARY KEY,
  question_id VARCHAR(255) NOT NULL,
  complexity ENUM('low', 'medium', 'high') NOT NULL,
  suggested_skills JSON,
  confidence DECIMAL(3,2),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Skill assignments table
CREATE TABLE skill_assignments (
  id VARCHAR(255) PRIMARY KEY,
  course_id VARCHAR(255) NOT NULL,
  quiz_id VARCHAR(255) NOT NULL,
  question_skills JSON NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
```

2. Canvas Token Validation Function:
```javascript
const validateCanvasToken = async (token, tokenType) => {
  try {
    // Test basic access
    const userResponse = await fetch('https://canvas.instructure.com/api/v1/users/self', {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    if (!userResponse.ok) return { valid: false, message: 'Invalid token' };
    
    // Test instructor-specific endpoints if needed
    if (tokenType === 'instructor') {
      const coursesResponse = await fetch('https://canvas.instructure.com/api/v1/courses', {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (!coursesResponse.ok) {
        return { valid: false, message: 'Token does not have instructor permissions' };
      }
    }
    
    return { valid: true, type: tokenType };
  } catch (error) {
    return { valid: false, message: 'Network error' };
  }
};
```

3. Token Encryption/Decryption:
```javascript
const encryptToken = (token) => {
  // Use crypto library to encrypt token
  return encryptedToken;
};

const decryptToken = (encryptedToken) => {
  // Use crypto library to decrypt token
  return decryptedToken;
};
```

4. Profile Update with Token Validation:
```javascript
app.put('/auth/profile', authenticateToken, async (req, res) => {
  const { name, email, canvasApiToken, canvasTokenType } = req.body;
  
  if (canvasApiToken) {
    // Validate token with Canvas
    const validation = await validateCanvasToken(canvasApiToken, canvasTokenType || 'student');
    if (!validation.valid) {
      return res.status(400).json({ message: validation.message });
    }
    
    // Encrypt and store token
    const encryptedToken = encryptToken(canvasApiToken);
    // Update user with encrypted token and type
  }
  
  // Update other profile fields
  // Return user object WITHOUT the token
});
```

5. Instructor-Specific Endpoints:
```javascript
// Get all courses for instructor
app.get('/canvas/instructor/courses', authenticateToken, async (req, res) => {
  const user = await getUser(req.user.id);
  if (user.canvasTokenType !== 'instructor') {
    return res.status(403).json({ message: 'Instructor token required' });
  }
  
  const token = decryptToken(user.canvasApiTokenEncrypted);
  const courses = await fetchInstructorCourses(token);
  res.json(courses);
});

// Get quiz questions for instructor
app.get('/canvas/instructor/quizzes/:quizId/questions', authenticateToken, async (req, res) => {
  const user = await getUser(req.user.id);
  if (user.canvasTokenType !== 'instructor') {
    return res.status(403).json({ message: 'Instructor token required' });
  }
  
  const token = decryptToken(user.canvasApiTokenEncrypted);
  const questions = await fetchQuizQuestions(token, req.params.quizId);
  res.json(questions);
});

// Question analysis endpoint
app.post('/achieveup/questions/analyze', authenticateToken, async (req, res) => {
  const { questions } = req.body;
  const analysis = [];
  
  for (const question of questions) {
    const complexity = analyzeQuestionComplexity(question.text);
    const suggestions = await getSkillSuggestions(question.text);
    
    analysis.push({
      questionId: question.id,
      complexity,
      suggestedSkills: suggestions,
      confidence: calculateConfidence(question.text, suggestions)
    });
  }
  
  res.json(analysis);
});
```

FRONTEND READY FEATURES:
=======================
✅ Dashboard with error handling and loading states
✅ Navigation with working links and persistent header
✅ Settings page with 4-quadrant layout (profile top-left, token bottom-left, password spans right)
✅ Canvas API token management UI (set, reveal, edit, clear)
✅ Instructor token support with type selection and benefits display
✅ Token type-specific instructions and validation
✅ Enhanced Badge Display System with generation, filtering, and export
✅ Advanced Skill Matrix Creator with templates and categorization
✅ Enhanced Skill Assignment Interface with bulk operations and analysis
✅ Progress Dashboard with skill tracking
✅ Analytics Dashboard with real-time data
✅ Login/Signup pages with instructor token support
✅ Backend status indicator in navigation
✅ All original AchieveUp AI functionality ported and enhanced

NOTES:
======
- All endpoints require Authorization: Bearer <token> header except signup/login
- Backend is fully implemented and ready for frontend integration
- Test user: nsanchez9009@gmail.com / password123
- Canvas API token must be included in user object responses for UI state detection
- Backend URL: https://gen-ai-prime-3ddeabb35bd7.herokuapp.com
- All endpoints return proper error responses (401 for invalid tokens, 400 for validation)
- Frontend handles backend unavailability gracefully with demo mode
- Settings page uses 4-quadrant layout for better UX
- Instructor tokens enable advanced course management and analytics
- Integration with KnowGap backend provides quiz data and risk prediction
- All original AchieveUp AI features have been successfully ported and enhanced

PRIORITY BACKEND UPDATES NEEDED:
===============================
1. ⚠️ Implement Canvas token validation endpoint with token type support
2. ⚠️ Add token encryption/decryption with type storage
3. ⚠️ Update profile endpoint to validate tokens by type before storing
4. ⚠️ Add token connection testing endpoint
5. ⚠️ Handle token expiration and refresh
6. ⚠️ Implement instructor-specific Canvas endpoints
7. ⚠️ Add instructor skill matrix creation with quiz mapping
8. ⚠️ Create instructor analytics endpoints
9. ⚠️ Integrate with KnowGap backend for quiz data
10. ⚠️ Implement question analysis and skill suggestion endpoints
11. ⚠️ Add enhanced badge progress tracking
12. ⚠️ Create skill assignment import/export functionality

STATUS: ✅ FRONTEND FULLY IMPLEMENTED WITH ALL ORIGINAL FEATURES - BACKEND NEEDS INSTRUCTOR TOKEN ENHANCEMENTS

Last Updated: December 2024