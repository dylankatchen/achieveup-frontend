ACHIEVEUP FRONTEND - KNOWGAP BACKEND INTEGRATION REQUIREMENTS
============================================================

FRONTEND STATUS: ✅ READY FOR PRODUCTION
- Fully implemented React/TypeScript frontend
- Deployed on Netlify with automatic GitHub deployment
- All UI components working and tested
- Canvas API token validation UI implemented
- Instructor/Student token type support implemented

BACKEND REPOSITORY: https://github.com/AndresQ9/knowgap-backend
CURRENT BACKEND STATUS: KnowGap backend exists but needs AchieveUp endpoints

CRITICAL MISSING ENDPOINTS (PRIORITY 1):
========================================

1. CANVAS API TOKEN VALIDATION ⚠️ CRITICAL
   =======================================
   
   POST /auth/validate-canvas-token
   - Purpose: Validate Canvas API token before storing in user profile
   - Request: { canvasApiToken: string, canvasTokenType: 'student' | 'instructor' }
   - Response: { valid: boolean, message?: string, user_info?: object }
   - Implementation: Call Canvas API /api/v1/users/self/profile with the token
   - Example:
     ```python
     # In your Flask route
     @app.route('/auth/validate-canvas-token', methods=['POST'])
     def validate_canvas_token():
         data = request.get_json()
         token = data.get('canvasApiToken')
         token_type = data.get('canvasTokenType', 'student')
         
         # Test token with Canvas API
         headers = {'Authorization': f'Bearer {token}'}
         response = requests.get('https://canvas.instructure.com/api/v1/users/self/profile', headers=headers)
         
         if response.status_code == 200:
             return jsonify({'valid': True, 'user_info': response.json()})
         else:
             return jsonify({'valid': False, 'message': 'Invalid Canvas API token'})
     ```

2. CANVAS CONNECTION TEST ⚠️ CRITICAL
   ===================================
   
   GET /canvas/test-connection
   - Purpose: Test if stored Canvas token is still valid
   - Headers: Authorization: Bearer <jwt_token>
   - Response: { connected: boolean, message?: string, user_info?: object }
   - Implementation: Use stored user's canvasApiToken to test Canvas API connection

3. CANVAS COURSES ENDPOINT ⚠️ CRITICAL
   ====================================
   
   GET /canvas/courses
   - Purpose: Get user's Canvas courses
   - Headers: Authorization: Bearer <jwt_token>
   - Response: CanvasCourse[] (array of course objects)
   - Implementation: Use stored user's canvasApiToken to call Canvas API /api/v1/courses

4. CANVAS QUIZZES ENDPOINT ⚠️ CRITICAL
   ====================================
   
   GET /canvas/courses/{courseId}/quizzes
   - Purpose: Get quizzes for a specific course
   - Headers: Authorization: Bearer <jwt_token>
   - Response: CanvasQuiz[] (array of quiz objects)
   - Implementation: Use stored user's canvasApiToken to call Canvas API /api/v1/courses/{courseId}/quizzes

5. CANVAS QUESTIONS ENDPOINT ⚠️ CRITICAL
   ======================================
   
   GET /canvas/quizzes/{quizId}/questions
   - Purpose: Get questions for a specific quiz
   - Headers: Authorization: Bearer <jwt_token>
   - Response: CanvasQuestion[] (array of question objects)
   - Implementation: Use stored user's canvasApiToken to call Canvas API /api/v1/quizzes/{quizId}/questions

USER PROFILE UPDATE WITH CANVAS TOKEN ⚠️ CRITICAL
=================================================

PUT /auth/profile
- Purpose: Update user profile including Canvas API token
- Headers: Authorization: Bearer <jwt_token>
- Request: { name?: string, email?: string, canvasApiToken?: string, canvasTokenType?: 'student' | 'instructor' }
- Response: { user: User }
- Implementation: Store canvasApiToken securely (encrypted) in user profile
- Security: Validate canvasApiToken with Canvas API before storing

ACHIEVEUP CORE ENDPOINTS (PRIORITY 2):
======================================

6. SKILL MATRIX MANAGEMENT
   =======================
   
   POST /achieveup/matrix/create
   - Request: { course_id: string, matrix_name: string, skills: string[] }
   - Response: SkillMatrix
   
   PUT /achieveup/matrix/{matrixId}
   - Request: { skills: string[] }
   - Response: SkillMatrix
   
   GET /achieveup/matrix/{courseId}
   - Response: SkillMatrix

7. SKILL ASSIGNMENT
   ================
   
   POST /achieveup/skills/assign
   - Request: { course_id: string, question_skills: { [questionId: string]: string[] } }
   - Response: void
   
   POST /achieveup/skills/suggest
   - Request: { question_text: string, course_context?: string }
   - Response: string[]

8. BADGE MANAGEMENT
   ================
   
   POST /achieveup/badges/generate
   - Request: { student_id: string, course_id: string, skill_levels: { [skillName: string]: 'beginner' | 'intermediate' | 'advanced' } }
   - Response: Badge[]
   
   GET /achieveup/badges/{studentId}
   - Response: Badge[]

9. PROGRESS TRACKING
   =================
   
   GET /achieveup/progress/{studentId}
   - Response: StudentProgress
   
   PUT /achieveup/progress/{studentId}
   - Request: UpdateProgressRequest
   - Response: StudentProgress

10. ANALYTICS
    ==========
    
    GET /achieveup/analytics/{studentId}
    - Response: GraphData[]
    
    GET /achieveup/analytics/course/{courseId}
    - Response: CourseData

INSTRUCTOR-SPECIFIC ENDPOINTS (PRIORITY 3):
===========================================

11. INSTRUCTOR COURSE MANAGEMENT
    ============================
    
    GET /canvas/instructor/courses
    - Purpose: Get all courses user teaches (instructor token)
    - Response: CanvasCourse[]
    
    GET /canvas/instructor/courses/{courseId}/quizzes
    - Purpose: Get all quizzes in instructor's course
    - Response: CanvasQuiz[]
    
    GET /canvas/instructor/quizzes/{quizId}/questions
    - Purpose: Get all questions in instructor's quiz
    - Response: CanvasQuestion[]

12. INSTRUCTOR ANALYTICS
    ====================
    
    GET /achieveup/instructor/courses/{courseId}/analytics
    - Response: InstructorCourseAnalytics

DATA MODELS REQUIRED:
====================

```python
# User Model (extend existing)
class User:
    id: str
    name: str
    email: str
    role: str  # 'student' | 'instructor' | 'admin'
    hasCanvasToken: bool
    canvasTokenType: str  # 'student' | 'instructor'
    canvas_token_created_at: datetime
    canvas_token_last_validated: datetime
    canvasApiToken: str  # encrypted

# Canvas Models
class CanvasCourse:
    id: str
    name: str
    code: str

class CanvasQuiz:
    id: str
    title: str
    course_id: str

class CanvasQuestion:
    id: str
    question_text: str
    quiz_id: str
    question_type: str
    points: int

# AchieveUp Models
class SkillMatrix:
    id: str
    course_id: str
    matrix_name: str
    skills: List[str]
    created_at: datetime

class Badge:
    id: str
    student_id: str
    course_id: str
    skill_name: str
    skill_level: str  # 'beginner' | 'intermediate' | 'advanced'
    earned: bool
    earned_at: datetime

class StudentProgress:
    student_id: str
    course_id: str
    total_skills: int
    earned_badges: int
    average_score: float
    recent_activity: List[dict]

class GraphData:
    labels: List[str]
    datasets: List[dict]
    summary: dict
```

IMPLEMENTATION PRIORITY:
=======================

PHASE 1 (CRITICAL - DO FIRST):
1. Canvas API token validation endpoint
2. Canvas connection test endpoint
3. Canvas courses endpoint
4. User profile update with Canvas token storage
5. Basic Canvas quizzes and questions endpoints

PHASE 2 (CORE FEATURES):
6. Skill matrix management endpoints
7. Skill assignment endpoints
8. Badge management endpoints
9. Progress tracking endpoints
10. Basic analytics endpoints

PHASE 3 (INSTRUCTOR FEATURES):
11. Instructor-specific Canvas endpoints
12. Instructor analytics endpoints

TESTING REQUIREMENTS:
====================

1. Test Canvas API token validation with real Canvas tokens
2. Test all endpoints with both student and instructor tokens
3. Test error handling for invalid tokens
4. Test CORS configuration for frontend domains
5. Test JWT authentication flow

SECURITY REQUIREMENTS:
======================

1. Encrypt Canvas API tokens before storing in database
2. Validate Canvas tokens before storing
3. Implement proper JWT token validation
4. Add rate limiting for API endpoints
5. Implement proper error handling without exposing sensitive data

DEPLOYMENT NOTES:
=================

1. Frontend is deployed on Netlify: https://achieveup-frontend.netlify.app
2. Backend should be deployed on Heroku or similar platform
3. Set up environment variables for Canvas API base URL
4. Configure CORS to allow frontend domain
5. Set up proper logging for debugging

CONTACT:
========

Frontend Repository: https://github.com/nsanchez9009/achieveup-frontend
Backend Repository: https://github.com/AndresQ9/knowgap-backend

For questions or issues, contact the frontend team or refer to the frontend repository README.