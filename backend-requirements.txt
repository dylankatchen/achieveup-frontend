ACHIEVEUP FRONTEND BACKEND REQUIREMENTS
=========================================

FRONTEND STATUS: COMPLETE AND READY FOR PRODUCTION
BACKEND STATUS: NEEDS IMPLEMENTATION

This document outlines the exact backend requirements needed to support the AchieveUp Instructor Portal frontend.

CRITICAL IMPLEMENTATION PRIORITIES:
===================================

HIGHEST PRIORITY (implement immediately):
1. Authentication system with instructor-only access
2. Canvas API integration for course/quiz data
3. AI skill suggestion endpoints
4. Basic skill matrix and assignment storage

MEDIUM PRIORITY:
1. AI question analysis and zero-shot classification
2. Student progress tracking
3. Advanced analytics endpoints

LOW PRIORITY:
1. Advanced analytics features
2. Data export/import functionality
3. Performance optimizations

REQUIRED API ENDPOINTS:
======================

1. AUTHENTICATION ENDPOINTS:
---------------------------
POST /api/auth/login
- Body: { email, password }
- Response: { token, user: { id, name, email, role: "instructor", canvasTokenType: "instructor" } }

POST /api/auth/signup
- Body: { name, email, password, canvasApiToken, canvasTokenType: "instructor" }
- Response: { token, user }

GET /api/auth/me
- Headers: Authorization: Bearer <token>
- Response: { user }

POST /api/auth/validate-canvas-token
- Body: { canvasApiToken, canvasTokenType: "instructor" }
- Response: { valid: boolean, message? }

2. CANVAS INTEGRATION ENDPOINTS:
-------------------------------
GET /api/canvas/instructor/courses
- Headers: Authorization: Bearer <token>
- Response: [{ id, name, code, description? }]

GET /api/canvas/instructor/quizzes/:courseId
- Response: [{ id, title, course_id }]

GET /api/canvas/instructor/questions/:quizId
- Response: [{ id, question_text, quiz_id, question_type?, points? }]

3. AI SKILL SUGGESTION ENDPOINTS:
---------------------------------
POST /achieveup/ai/suggest-skills
- Body: { courseId, courseName, courseCode, courseDescription? }
- Response: [{ skill, relevance, description }]
- AI Processing: Analyze course content and suggest 10-12 relevant skills

4. SKILL MATRIX ENDPOINTS:
-------------------------
POST /achieveup/matrix/create
- Body: { course_id, matrix_name, skills, description? }
- Response: { _id, course_id, matrix_name, skills, created_at, updated_at }

GET /achieveup/matrix/:matrixId
- Response: skill matrix object

PUT /achieveup/matrix/:matrixId
- Body: { skills }
- Response: updated skill matrix

5. SKILL ASSIGNMENT ENDPOINTS:
------------------------------
POST /achieveup/skills/assign
- Body: { course_id, question_skills: { [questionId]: [skills] } }
- Response: success confirmation

POST /achieveup/skills/suggest
- Body: { question_text, course_context? }
- Response: [skill suggestions]

POST /achieveup/ai/analyze-questions
- Body: { courseId, quizId, questions: [{ id, text, type?, points? }] }
- Response: [{ questionId, complexity: "low"|"medium"|"high", suggestedSkills, confidence }]
- AI Processing: Use zero-shot classification to analyze questions and suggest skills

POST /achieveup/ai/bulk-assign
- Body: { courseId, quizId }
- Response: { [questionId]: [skills] }
- AI Processing: Analyze all questions in quiz and assign appropriate skills

6. ANALYTICS ENDPOINTS:
----------------------
GET /api/analytics/course/:courseId/students
- Response: [{ id, name, progress, skillsMastered, badgesEarned, riskLevel }]

GET /api/analytics/individual-graphs/:studentId
- Response: { performance, distribution, trends, radar, summary }

GET /api/analytics/export/:courseId
- Response: CSV/JSON export data

DATABASE SCHEMA REQUIREMENTS:
=============================

1. USERS TABLE:
--------------
- id: string (primary key)
- name: string
- email: string (unique)
- password: string (hashed)
- role: "instructor" | "admin"
- canvasTokenType: "instructor"
- canvasApiToken: string (encrypted)
- canvas_token_created_at: timestamp
- canvas_token_last_validated: timestamp
- created_at: timestamp
- updated_at: timestamp

2. SKILL_MATRICES TABLE:
-----------------------
- _id: string (primary key)
- course_id: string
- matrix_name: string
- skills: array of strings
- description: string (optional)
- created_at: timestamp
- updated_at: timestamp

3. SKILL_ASSIGNMENTS TABLE:
--------------------------
- id: string (primary key)
- course_id: string
- quiz_id: string
- question_id: string
- skills: array of strings
- ai_generated: boolean
- human_reviewed: boolean
- created_at: timestamp
- updated_at: timestamp

4. QUESTION_ANALYSIS TABLE:
--------------------------
- id: string (primary key)
- question_id: string
- quiz_id: string
- course_id: string
- complexity: "low" | "medium" | "high"
- ai_confidence: number (0-1)
- suggested_skills: array of strings
- analysis_status: "pending" | "analyzing" | "completed" | "error"
- created_at: timestamp
- updated_at: timestamp

5. STUDENT_PROGRESS TABLE:
-------------------------
- id: string (primary key)
- student_id: string
- course_id: string
- skill_name: string
- score: number
- level: "beginner" | "intermediate" | "advanced"
- total_questions: number
- correct_answers: number
- last_updated: timestamp

AI SERVICE INTEGRATION REQUIREMENTS:
===================================

1. SKILL SUGGESTION AI:
-----------------------
- Input: Course metadata (name, code, description)
- Output: Relevant skills with relevance scores
- Method: NLP analysis of course content
- Fallback: Rule-based skill mapping for common course types

2. QUESTION ANALYSIS AI:
-----------------------
- Input: Question text, course context
- Output: Complexity level, suggested skills, confidence score
- Method: Zero-shot classification using pre-trained models
- Features: Question type detection, complexity analysis

3. BULK ASSIGNMENT AI:
---------------------
- Input: Quiz questions, course context, existing skill matrix
- Output: Skill assignments for all questions
- Method: Batch zero-shot classification
- Performance: Handle 50+ questions efficiently

CANVAS API INTEGRATION:
======================

1. AUTHENTICATION:
- Use instructor Canvas API tokens
- Validate tokens with Canvas API
- Store token securely with encryption

2. DATA RETRIEVAL:
- Fetch instructor courses: GET /api/v1/courses
- Fetch course quizzes: GET /api/v1/courses/:id/quizzes
- Fetch quiz questions: GET /api/v1/quizzes/:id/questions
- Handle Canvas API rate limits and pagination

3. ERROR HANDLING:
- Invalid/expired tokens
- Canvas API downtime
- Rate limit exceeded
- Network connectivity issues

SECURITY REQUIREMENTS:
=====================

1. AUTHENTICATION:
- JWT-based authentication
- Token expiration and refresh
- Role-based access control (instructor-only)

2. DATA PROTECTION:
- Encrypt Canvas API tokens
- Secure password hashing (bcrypt)
- Input validation and sanitization
- SQL injection prevention

3. API SECURITY:
- CORS configuration for frontend domain
- Rate limiting on AI endpoints
- Request size limits
- Secure headers

ERROR HANDLING REQUIREMENTS:
===========================

1. API ERROR RESPONSES:
- 400: Bad Request with specific error messages
- 401: Unauthorized (invalid/expired token)
- 403: Forbidden (insufficient permissions)
- 404: Not Found
- 429: Rate Limit Exceeded
- 500: Internal Server Error

2. AI SERVICE ERRORS:
- Graceful degradation when AI services fail
- Fallback to rule-based systems
- Clear error messages to users
- Retry logic for transient failures

3. CANVAS API ERRORS:
- Handle Canvas API downtime
- Token expiration handling
- Rate limit management
- Data validation for Canvas responses

PERFORMANCE REQUIREMENTS:
========================

1. API RESPONSE TIMES:
- Authentication: < 200ms
- Canvas data: < 1s
- AI skill suggestions: < 3s
- Bulk AI analysis: < 10s (for 50 questions)

2. SCALABILITY:
- Support multiple concurrent instructors
- Efficient database queries
- Caching for frequently accessed data
- AI service load balancing

3. OPTIMIZATION:
- Database indexing on frequently queried fields
- API response caching
- Batch processing for bulk operations
- Connection pooling

TESTING REQUIREMENTS:
====================

1. UNIT TESTS:
- All API endpoints
- Authentication logic
- AI service integrations
- Canvas API integration

2. INTEGRATION TESTS:
- End-to-end API workflows
- Canvas API integration
- AI service integration
- Database operations

3. LOAD TESTS:
- Concurrent user scenarios
- Bulk AI processing
- Canvas API rate limits
- Database performance

DEPLOYMENT REQUIREMENTS:
=======================

1. ENVIRONMENT:
- Deploy to Heroku (preferred) or compatible platform
- Environment variables for configuration
- Database migrations
- AI service configuration

2. MONITORING:
- API performance monitoring
- Error tracking and logging
- AI service health checks
- Canvas API integration monitoring

3. BACKUP:
- Database backup strategy
- Data retention policies
- Disaster recovery plan

IMMEDIATE NEXT STEPS FOR BACKEND TEAM:
=====================================

1. SET UP PROJECT STRUCTURE:
- Initialize backend project (Node.js/Python recommended)
- Set up database (PostgreSQL/MongoDB)
- Configure environment variables
- Set up deployment pipeline

2. IMPLEMENT CORE AUTHENTICATION:
- User registration/login with instructor validation
- JWT token management
- Canvas token validation endpoint
- Role-based access control

3. CANVAS INTEGRATION:
- Canvas API client setup
- Course/quiz/question data retrieval
- Token management and validation
- Error handling for Canvas API

4. BASIC AI ENDPOINTS:
- Skill suggestion endpoint with rule-based fallback
- Simple question analysis
- Bulk assignment placeholder

5. DATABASE SETUP:
- Create required tables/collections
- Set up migrations
- Implement basic CRUD operations
- Add indexes for performance

FRONTEND EXPECTATIONS:
=====================

The frontend is COMPLETE and expects:
- All endpoints to return JSON responses
- Consistent error response format
- Proper HTTP status codes
- CORS configured for frontend domain

The frontend includes comprehensive error handling and will gracefully handle:
- Backend service unavailability
- AI service failures
- Canvas API errors
- Network connectivity issues

SUPPORT:
=======

For implementation questions:
- Reference this document for exact requirements
- Frontend source code is available for API contract details
- Test with frontend locally during development

DELIVERY TIMELINE:
=================

PHASE 1 (Week 1): Authentication + Canvas Integration
PHASE 2 (Week 2): Basic AI Endpoints + Skill Matrix
PHASE 3 (Week 3): Advanced AI + Analytics
PHASE 4 (Week 4): Testing + Performance Optimization

The frontend is ready for production deployment once these backend requirements are implemented. 