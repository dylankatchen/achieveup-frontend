ACHIEVEUP BACKEND REQUIREMENTS
================================

FRONTEND STATUS: COMPLETE AND DEPLOYED
BACKEND STATUS: NEEDS IMPLEMENTATION

CRITICAL ENDPOINTS TO IMPLEMENT:

1. AUTHENTICATION ENDPOINTS:
POST /api/auth/validate-canvas-token
GET /api/auth/token-status  
POST /api/auth/refresh-token

2. INSTRUCTOR ENDPOINTS:
GET /api/instructor/courses
GET /api/instructor/courses/:courseId/analytics
GET /api/instructor/students/:courseId
POST /api/instructor/badges/web-linked
GET /api/instructor/dashboard
GET /api/instructor/course/:courseId/student-analytics

3. AI ENDPOINTS:
POST /api/ai/analyze-questions
POST /api/ai/suggest-skills
POST /api/ai/bulk-assign
POST /api/instructor/analyze-questions-with-ai
POST /api/instructor/bulk-assign-skills-with-ai

4. BADGE ENDPOINTS:
POST /api/badges/web-linked
GET /api/badges/:badgeId/verify
POST /api/badges/:badgeId/share

5. ANALYTICS ENDPOINTS:
GET /api/analytics/course/:courseId/students
GET /api/analytics/course/:courseId/risk-assessment
GET /api/analytics/export/:courseId
GET /api/analytics/individual-graphs

DATABASE CHANGES NEEDED:

1. Add to User model:
- canvasTokenType: 'student' | 'instructor'
- canvasTokenCreatedAt: string
- canvasTokenLastValidated: string

2. Add to Badge model:
- webUrl: string
- shareUrl: string
- verificationCode: string
- isPublic: boolean

3. Add to Question model:
- aiAnalysisStatus: 'pending' | 'analyzing' | 'completed' | 'error'
- humanReviewed: boolean

IMPLEMENTATION PRIORITY:

HIGHEST PRIORITY (implement first):
- Canvas token validation with student/instructor differentiation
- Basic instructor course management APIs
- Question analysis and skill suggestion endpoints
- Update user model with token type fields

MEDIUM PRIORITY:
- Web-linked badge system
- Enhanced analytics endpoints
- Bulk operations APIs
- AI integration for question analysis

LOW PRIORITY:
- Advanced analytics and risk assessment
- Export/import functionality
- Performance optimizations

CANVAS API INTEGRATION:
- GET /api/v1/courses (for instructor)
- GET /api/v1/courses/:id/students (for instructor)
- GET /api/v1/courses/:id/quizzes
- GET /api/v1/quizzes/:id/questions

AI INTEGRATION:
- Question complexity analysis (low/medium/high)
- Skill mapping from question content
- Confidence scoring for suggestions
- Fallback logic for AI failures

ERROR HANDLING:
- Return proper HTTP status codes
- Include meaningful error messages
- Rate limiting for AI endpoints
- Data validation on all inputs
- CORS configuration for frontend domain

FRONTEND INTEGRATION:
- Frontend expects API_URL: https://gen-ai-prime-3ddeabb35bd7.herokuapp.com
- All endpoints should return JSON
- Handle 401, 404, 500 errors gracefully
- Frontend has comprehensive error handling and fallbacks

IMPLEMENTATION NOTES:
- Use JWT-based authentication
- Implement role-based access control
- Store Canvas token type and validation timestamp
- Generate unique URLs for web-linked badges
- Use NLP/ML for question analysis
- Cache AI results to avoid repeated calls
- Implement proper data validation
- Add comprehensive logging

TESTING REQUIREMENTS:
- Test all endpoints with valid and invalid data
- Test Canvas API integration
- Test AI service integration
- Test authentication flow
- Test role-based access
- Test error scenarios

DEPLOYMENT:
- Deploy to same Heroku app: gen-ai-prime-3ddeabb35bd7.herokuapp.com
- Ensure CORS allows frontend domain
- Set up proper environment variables
- Monitor API performance and errors

FRONTEND IS READY - IMPLEMENT THESE ENDPOINTS TO MAKE IT WORK 